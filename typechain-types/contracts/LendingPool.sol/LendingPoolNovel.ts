/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LendingPoolNovelInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "addAdmin"
      | "admins"
      | "createBatch"
      | "getBatchByIndex"
      | "getBatchStatus"
      | "getUserBatches"
      | "pause"
      | "paused"
      | "processBatch"
      | "removeAdmin"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "BatchCreated"
      | "BatchProcessed"
      | "BatchStatusChanged"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "createBatch",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBatchStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBatches",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processBatch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBatchStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchCreatedEvent {
  export type InputTuple = [batchKey: BytesLike, timestamp: BigNumberish];
  export type OutputTuple = [batchKey: string, timestamp: bigint];
  export interface OutputObject {
    batchKey: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchProcessedEvent {
  export type InputTuple = [batchKey: BytesLike, processedCount: BigNumberish];
  export type OutputTuple = [batchKey: string, processedCount: bigint];
  export interface OutputObject {
    batchKey: string;
    processedCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchStatusChangedEvent {
  export type InputTuple = [
    batchKey: BytesLike,
    oldStatus: BigNumberish,
    newStatus: BigNumberish
  ];
  export type OutputTuple = [
    batchKey: string,
    oldStatus: bigint,
    newStatus: bigint
  ];
  export interface OutputObject {
    batchKey: string;
    oldStatus: bigint;
    newStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPoolNovel extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPoolNovel;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolNovelInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  createBatch: TypedContractMethod<
    [token: AddressLike, users: AddressLike[], amounts: BigNumberish[]],
    [string],
    "nonpayable"
  >;

  getBatchByIndex: TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getBatchStatus: TypedContractMethod<
    [token: AddressLike, batchId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserBatches: TypedContractMethod<
    [token: AddressLike, user: AddressLike],
    [bigint[]],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  processBatch: TypedContractMethod<
    [token: AddressLike, batchId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createBatch"
  ): TypedContractMethod<
    [token: AddressLike, users: AddressLike[], amounts: BigNumberish[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBatchByIndex"
  ): TypedContractMethod<
    [token: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBatchStatus"
  ): TypedContractMethod<
    [token: AddressLike, batchId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBatches"
  ): TypedContractMethod<
    [token: AddressLike, user: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "processBatch"
  ): TypedContractMethod<
    [token: AddressLike, batchId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BatchCreated"
  ): TypedContractEvent<
    BatchCreatedEvent.InputTuple,
    BatchCreatedEvent.OutputTuple,
    BatchCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BatchProcessed"
  ): TypedContractEvent<
    BatchProcessedEvent.InputTuple,
    BatchProcessedEvent.OutputTuple,
    BatchProcessedEvent.OutputObject
  >;
  getEvent(
    key: "BatchStatusChanged"
  ): TypedContractEvent<
    BatchStatusChangedEvent.InputTuple,
    BatchStatusChangedEvent.OutputTuple,
    BatchStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "BatchCreated(bytes32,uint256)": TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;
    BatchCreated: TypedContractEvent<
      BatchCreatedEvent.InputTuple,
      BatchCreatedEvent.OutputTuple,
      BatchCreatedEvent.OutputObject
    >;

    "BatchProcessed(bytes32,uint256)": TypedContractEvent<
      BatchProcessedEvent.InputTuple,
      BatchProcessedEvent.OutputTuple,
      BatchProcessedEvent.OutputObject
    >;
    BatchProcessed: TypedContractEvent<
      BatchProcessedEvent.InputTuple,
      BatchProcessedEvent.OutputTuple,
      BatchProcessedEvent.OutputObject
    >;

    "BatchStatusChanged(bytes32,uint8,uint8)": TypedContractEvent<
      BatchStatusChangedEvent.InputTuple,
      BatchStatusChangedEvent.OutputTuple,
      BatchStatusChangedEvent.OutputObject
    >;
    BatchStatusChanged: TypedContractEvent<
      BatchStatusChangedEvent.InputTuple,
      BatchStatusChangedEvent.OutputTuple,
      BatchStatusChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
